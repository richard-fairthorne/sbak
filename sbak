#!/bin/bash
#    sbak - remote Server Backups - quick and easy
#    Copyright (C) 2018 Richard Fairthorne
#    http://www.hashbang.info
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# ########################################################################

# version
MAJOR=1
MINOR=1
REVISION=0
VERSION=$MAJOR.$MINOR.$REVISION

# Set usage text
USAGE="
Usage: $(basename $0) [<options>] [<username>@]<remote.host> [<localarchive>]

Options:

  -b <bandwidth-limit>    - in kB/s default is 0 or no bandwidth limit
  -d <backup-directory>   - default is ~/.sbak
  -n <number-of-backups>  - default is 10. Try 30 or 40.
  -p [server-nice]        - default is 10. Range from 0 to 20. Higher numbers
                            use less server resources.

"

# defaults
BACKUP_DIR=~/.sbak
NUM_BACKUPS=10
BWLIMIT=0
NICE_SERVER=10
LOGIN=`whoami`

# arguments
while getopts 'vb:d:n:p:l:' OPTION
do
  case $OPTION in
    v) echo "$VERSION"; exit 0;;
    b) BWLIMIT=$OPTARG;;
    d) BACKUP_DIR=$OPTARG;;
    n) NUM_BACKUPS=$OPTARG;;
    p) NICE_SERVER=$OPTARG;;
    l) LOGIN=$OPTARG;;
    ?) echo "$USAGE"; exit 2;;
  esac
done

# Check for software requirement
if ! which rsync
then
  echo "rsync must be installed and on the PATH"
  exit 1
fi

# Check for rsync version 3.1 or greater
RSYNC_VER=()
for v in `rsync --version | head -1 | grep -o -E '[0-9]+' | head -3`
do
  RSYNC_VER+=($v)
done

echo -n System has RSYNC version ${RSYNC_VER[0]}.${RSYNC_VER[1]}.${RSYNC_VER[2]} -

if (( ${RSYNC_VER[0]} < 3 ))
then
  echo "rsync version must be at least 3.1.0"
  exit 2
fi

if (( ${RSYNC_VER[0]} == 3 )) && (( ${RSYNC_VER[1]} < 1 ))
then
  echo "rsync 3 must be 3.1 or greater"
  exit 2
fi
echo "ok"

# login provided with servername (ssh style - user@server)
shift $(($OPTIND - 1))
if [[ $1 == *"@"* ]]; then
  LOGIN=${1%@*}
fi
SERVER=${1#*@}

if [ "$SERVER" == "" ]
then
  echo "$USAGE"
  exit 3
fi

# Protect against concurrent backups of the same server
if [ ! -e $BACKUP_DIR/$SERVER/runpid ]
then
  echo $$ > $BACKUP_DIR/$SERVER/runpid
else
  OLDPID=`cat $BACKUP_DIR/$SERVER/runpid`
        echo "Testing if process $OLDPID is still running..."
  kill -0 $OLDPID
        if [ $? != '0' ]
  then
          echo "$OLDPID is dead."
          echo $$ > $BACKUP_DIR/$SERVER/runpid
  else
    echo "$OLDPID is still running! Exiting."
    exit 1
  fi

fi

echo "sbak: (C)2009 Obstacles Gone Corporation"
echo "Preparing to backup server: $SERVER"
echo "Logging in as: $USER"
echo "--"
echo

if [ ! -e $BACKUP_DIR/$SERVER ]
then
  echo "Creating backup directory."
  mkdir -p $BACKUP_DIR/$SERVER/backups
fi

if [ ! -e $BACKUP_DIR/$SERVER/exclude ]
then
  echo "Creating empty exclude file."
  cat <<'EOF'>$BACKUP_DIR/$SERVER/exclude
# An empty exclude file will backup a whole drive

# Include "includeMe"
# + /includeMe

# Exclude everything else
# - /*

- /*
EOF
fi

if [ -e $BACKUP_DIR/$SERVER/backups/.new-backup ]
then
  echo "Attempting to resume partial backup"
else
  echo "Making new-backup directory"
  mkdir $BACKUP_DIR/$SERVER/backups/.new-backup
fi
echo

echo "Removing last sbak.log"
>$BACKUP_DIR/$SERVER/sbak.log

echo "Starting backup."
rsync -ayz --info=progress2 --log-file=$BACKUP_DIR/$SERVER/sbak.log --partial --numeric-ids --bwlimit=$BWLIMIT --exclude-from=$BACKUP_DIR/$SERVER/exclude --delete-after --rsync-path="nice -n $NICE_SERVER rsync" --link-dest=$BACKUP_DIR/$SERVER/backups/1-backups-ago $LOGIN@$SERVER:/ $BACKUP_DIR/$SERVER/backups/.new-backup 2>$BACKUP_DIR/$SERVER/error.log

RSYNC_RETURN=$?
if [ $RSYNC_RETURN == 0 ] || [ $RSYNC_RETURN == 24 ]
then
  echo "Removing highest numbered backup ($NUM_BACKUPS)"
  rm -rf $BACKUP_DIR/$SERVER/backups/${NUM_BACKUPS}-backups-ago

  for ((i=$NUM_BACKUPS;i>1;i-=1)); do
    o=$((i-1))
    if [ -e "$BACKUP_DIR/$SERVER/backups/$o-backups-ago" ]
    then
      mv $BACKUP_DIR/$SERVER/backups/$o-backups-ago $BACKUP_DIR/$SERVER/backups/$i-backups-ago
    fi
  done

  mv $BACKUP_DIR/$SERVER/backups/.new-backup $BACKUP_DIR/$SERVER/backups/1-backups-ago
  touch $BACKUP_DIR/$SERVER/backups/1-backups-ago
else
  echo "rsync failed with retval $RSYNC_RETURN while backing up $SERVER" >> $BACKUP_DIR/$SERVER/error.log
  echo "Backup did not complete. You may try to resume, or examine $BACKUP_DIR/$SERVER/error.log for more details.";
fi

rm $BACKUP_DIR/$SERVER/runpid
